openapi: 3.0.1
info:
  title: Coolestprojects registration
  description: This api exposes the api's for the Coolestproject registration website,
    voting system, event setup.
  version: 0.0.4
servers:
- url: /
tags:
- name: registration
- name: login
- name: user
paths:
  /tshirts:
    get:
      operationId: fetchTshirts
      tags:
      - values
      summary: Get TShirts
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TshirtGroup'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /questions:
    get:
      operationId: fetchQuestions
      tags:
      - values
      summary: Get Questions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /approvals:
    get:
      operationId: fetchApprovals
      tags:
      - values
      summary: Get Approvals
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Approval'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /settings:
    get:
      operationId: fetch
      tags:
      - settings
      summary: Get settings
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        404:
          description: No active event
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'        
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /register:
    post:
      tags:
      - registration
      summary: Create new registration
      requestBody:
        required: true
        description: The registration to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /participants:
    post:
      tags:
      - project
      summary: Create new participant
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
  /attachments:
    post:
      tags:
      - attachment
      summary: Create new attachment
      requestBody:
        description: The attachment to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SASToken'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
  /attachments/{name}/sas:
    post:
      tags:
      - attachment
      summary: Get new SAS token for attachment
      parameters:
      - name: name
        in: path
        description: name of attachment
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SASToken'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
  /attachments/{name}:
    delete:
      tags:
      - attachment
      summary: delete attachments
      parameters:
      - name: name
        in: path
        description: name of attachment
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
  /userinfo:
    get:
      tags:
      - user
      summary: get userinfo for the logged in user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
    delete:
      tags:
      - user
      summary: delete user
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
    patch:
      tags:
      - user
      summary: update user
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
  /projectinfo:
    get:
      tags:
      - project
      summary: get projectinfo for the logged in user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: No project found
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
    post:
      tags:
      - project
      summary: create project
      requestBody:
        description: Project info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
    delete:
      tags:
      - project
      summary: delete project
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
    patch:
      tags:
      - project
      summary: update project
      requestBody:
        description: Project info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - loginToken: []
  /login:
    post:
      tags:
      - login
      summary: Login / Activate account
      requestBody:
        description: Login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginActivate'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    post:
      tags:
      - login
      summary: delete Login
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /mailToken:
    post:
      tags:
      - login
      summary: Get new token to login
      requestBody:
        description: email address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginMail'
        required: true
      responses:
        200:
          description: OK
          content: {}
        500:
          description: Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Login:
      type: object
      properties:
        api_key:
          type: string
        expires:
          type: string
          format: date-time
        language:
          type: string
          enum:
          - nl
          - fr
          - en
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        api_key: api_key
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    User:
      required:
      - firstname
      - language
      - lastname
      - mandatory_approvals
      - month
      - sex
      - year
      - email
      type: object
      properties:
        id:
          type: integer
        language:
          type: string
          enum:
          - nl
          - fr
          - en
        email:
          type: string
          format: email
        firstname:
          type: string
          example: Jane
        lastname:
          type: string
          example: Doe
        sex:
          type: string
          enum:
          - m
          - f
          - x
        gsm:
          pattern: ^((\+|00)32\s?|0)([1-9][0-9]\d{6})\d?$
          type: string
          example: +32460789101
        general_questions:
          type: array
          items:
            type: string
        mandatory_approvals:
          type: array
          items:
            type: string
        year:
          type: integer
        month:
          type: integer
        t_size:
          type: integer
        gsm_guardian:
          pattern: ^((\+|00)32\s?|0)([1-9][0-9]\d{6})\d?$
          type: string
          example: +32460789101
        email_guardian:
          type: string
          format: email
        via:
          maxLength: 200
          type: string
        medical:
          maxLength: 255
          type: string
        delete_possible:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
    OtherProject:
      type: object
      properties:
        project_code:
          maxLength: 36
          minLength: 36
          type: string
    Project:
      type: object
      properties:
        own_project:
          $ref: '#/components/schemas/OwnProject'
        other_project:
          $ref: '#/components/schemas/OtherProject'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    OwnProject:
      type: object
      properties:
        project_id:
          type: integer
        project_name:
          maxLength: 100
          type: string
        project_descr:
          maxLength: 4000
          type: string
        project_type:
          maxLength: 100
          type: string
        project_lang:
          type: string
          enum:
          - nl
          - fr
          - en
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        delete_possible:
          type: boolean
    Registration:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        project:
          $ref: '#/components/schemas/Project'
    LoginActivate:
      type: object
      properties:
        jwt:
          type: string
    LoginMail:
      type: object
      properties:
        email:
          type: string
          format: email
    Participant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        self:
          type: boolean
    Settings:
      type: object
      properties:
        startDateEvent:
          type: string
          format: date
        maxAge:
          type: number
        minAge:
          type: number
        guardianAge:
          type: number
        tshirtDate:
          type: string
          format: date
        enviroment:
          type: string
        waitingListActive:
          type: boolean
        maxUploadSize:
          type: integer
        isActive:
          type: boolean
        eventBeginDate:
          type: string
          format: date
        registrationOpenDate:
          type: string
          format: date
        registrationClosedDate:
          type: string
          format: date
        projectClosedDate:
          type: string
          format: date
        officialStartDate:
          type: string
          format: date
        eventEndDate:
          type: string
          format: date
        eventTitle:
          type: string
        isRegistrationOpen:
          type: boolean
        isProjectClosed:
          type: boolean
        maxRegistration:
          type: integer
        maxParticipants:
          type: integer
    TshirtGroup:
        type: object
        required: ['group']
        properties:
          group:
            type: string
          items:
            type: array
            items:
              $ref: '#/components/schemas/Tshirt'
    Tshirt:
      type: object
      required: ['id','name']
      properties:
        id:
          type: integer
        name:
          type: string
    Address:
      type: object
      properties:
        street:
          type: string
        house_number:
          type: string
        municipality_name:
          type: string
        box_number:
          type: string
        postalcode:
          maxLength: 4
          type: string
    Question:
      type: object
      required: ['id']
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        positive:
          type: string
        negative:
          type: string
    Approval:
      type: object
      required: ['id']
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    SASToken:
      type: object
      properties:
        url:
          type: string
          format: uri
        expiresOn:
          type: string
          format: date-time
        startsOn:
          type: string
          format: date-time
    Attachment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        filename:
          type: string
        size:
          type: integer
        confirmed:
          type: boolean
        exists:
          type: boolean
        type:
          type: string
          enum:
          - link
          - movie
  securitySchemes:
    loginToken:
      type: apiKey
      name: api_key
      in: header
