---
swagger: "2.0"
info:
  description:
    "This api exposes the api's for the Coolestproject registration website,\
    \ voting system, event setup."
  version: "0.0.4"
  title: "Coolestprojects registration"
tags:
  - name: "registration"
  - name: "login"
  - name: "user"
paths:
  /tshirts:
    get:
      tags:
        - "valuehelps"
      summary: "Get TShirts"
      operationId: "tshirtGET"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Tshirt"
      x-swagger-router-controller: "Tshirts"
  /questions:
    get:
      tags:
        - "valuehelps"
      summary: "Get Questions"
      operationId: "questionGET"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Question"
      x-swagger-router-controller: "Question"
  /approvals:
    get:
      tags:
        - "valuehelps"
      summary: "Get Approvals"
      operationId: "approvalGET"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Approval"
      x-swagger-router-controller: "Approval"
  /settings:
    get:
      tags:
        - "settings"
      summary: "Get settings"
      operationId: "settingsGET"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Settings"
      x-swagger-router-controller: "Settings"
  /register:
    post:
      tags:
        - "registration"
      summary: "Create new registration"
      operationId: "registerPOST"
      parameters:
        - in: "body"
          name: "registration"
          description: "The registration to create."
          required: false
          schema:
            $ref: "#/definitions/Registration"
      responses:
        200:
          description: "OK"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Registration"
  /participants:
    post:
      tags:
        - "project"
      summary: "Create new participant"
      operationId: "participantPOST"
      parameters: []
      responses:
        200:
          description: "OK"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Participant"
  /attachments:
    post:
      tags:
        - "attachment"
      summary: "Create new attachment"
      operationId: "attachmentPOST"
      parameters: []
      responses:
        200:
          description: "OK"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Attachment"
    delete:
      tags:
        - "attachment"
      summary: "delete attachment"
      operationId: "attachmentDELETE"
      parameters: []
      responses:
        200:
          description: "OK"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Attachment"
  /userinfo:
    get:
      tags:
        - "user"
      summary: "get userinfo for the logged in user"
      operationId: "userinfoGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "User"
    patch:
      tags:
        - "user"
      summary: "update user"
      operationId: "userinfoPATCH"
      parameters:
        - in: "body"
          name: "user"
          description: "User info"
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "User"
    delete:
      tags:
        - "user"
      summary: "delete user"
      operationId: "userinfoDELETE"
      responses:
        200:
          description: "OK"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "User"
  /projectinfo:
    get:
      tags:
        - "project"
      summary: "get projectinfo for the logged in user"
      operationId: "projectinfoGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Project"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Project"
    patch:
      tags:
        - "project"
      summary: "update project"
      operationId: "projectinfoPATCH"
      parameters:
        - in: "body"
          name: "project"
          description: "Project info"
          required: false
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Project"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Project"
    post:
      tags:
        - "project"
      summary: "create project"
      operationId: "projectinfoPOST"
      parameters:
        - in: "body"
          name: "project"
          description: "Project info"
          required: false
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Project"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Project"
    delete:
      tags:
        - "project"
      summary: "delete project"
      operationId: "projectinfoDELETE"
      responses:
        200:
          description: "OK"
        500:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - loginToken: []
      x-swagger-router-controller: "Project"
  /login:
    post:
      tags:
        - "login"
      summary: "Login / Activate account"
      operationId: "loginPOST"
      parameters:
        - in: "body"
          name: "login"
          description: "Login information"
          required: false
          schema:
            $ref: "#/definitions/LoginActivate"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Login"
      x-swagger-router-controller: "Login"
  /logout:
    post:
      tags:
        - "login"
      summary: "delete Login"
      operationId: "logoutPOST"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "Logout"
  /mailToken:
    post:
      tags:
        - "login"
      summary: "Get new token to login"
      operationId: "mailLoginPOST"
      parameters:
        - in: "body"
          name: "login"
          description: "email address"
          required: true
          schema:
            $ref: "#/definitions/LoginMail"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "Login"
securityDefinitions:
  loginToken:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Login:
    type: "object"
    properties:
      api_key:
        type: "string"
      expires:
        type: "string"
        format: "date-time"
      language:
        type: "string"
        enum:
          - "nl"
          - "fr"
          - "en"
    example:
      expires: "2000-01-23T04:56:07.000+00:00"
      api_key: "api_key"
  Error:
    type: "object"
    required:
      - "code"
      - "message"
    properties:
      code:
        type: "string"
      message:
        type: "string"
  User:
    type: "object"
    required:
      - "year"
      - "month"
      - "firstname"
      - "lastname"
      - "mandatory_approvals"
      - "sex"
      - "language"
    properties:
      id:
        type: "integer"
      language:
        type: "string"
        enum:
          - "nl"
          - "fr"
          - "en"
      email:
        type: "string"
        format: "email"
      firstname:
        type: "string"
        example: "Jane"
      lastname:
        type: "string"
        example: "Doe"
      sex:
        type: "string"
        enum:
          - "m"
          - "f"
          - "x"
      gsm:
        type: "string"
        example: "+32460789101"
        pattern: "^((\\+|00)32\\s?|0)([1-9][0-9]\\d{6})\\d?$"
      general_questions:
        type: "array"
        items:
          type: "integer"
      mandatory_approvals:
        type: "array"
        items:
          type: "integer"
      year:
        type: "integer"
      month:
        type: "integer"
      t_size:
        type: "integer"
      gsm_guardian:
        type: "string"
        example: "+32460789101"
        pattern: "^((\\+|00)32\\s?|0)([1-9][0-9]\\d{6})\\d?$"
      email_guardian:
        type: "string"
        format: "email"
      via:
        type: "string"
        maxLength: 200
      medical:
        type: "string"
        maxLength: 255
      delete_possible:
        type: "boolean"
      address:
        $ref: "#/definitions/Address"
  OtherProject:
    type: "object"
    properties:
      project_code:
        type: "string"
        maxLength: 36
        minLength: 36
  Project:
    type: "object"
    properties:
      own_project:
        $ref: "#/definitions/OwnProject"
      other_project:
        $ref: "#/definitions/OtherProject"
      attachments:
        type: "array"
        items:
          $ref: "#/definitions/Attachment"
  OwnProject:
    type: "object"
    properties:
      project_id:
        type: "integer"
      project_name:
        type: "string"
        maxLength: 100
      project_descr:
        type: "string"
        maxLength: 4000
      project_type:
        type: "string"
        maxLength: 100
      project_lang:
        type: "string"
        enum:
          - "nl"
          - "fr"
          - "en"
      participants:
        type: "array"
        items:
          $ref: "#/definitions/Participant"
      delete_possible:
        type: "boolean"
  Registration:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/User"
      project:
        $ref: "#/definitions/Project"
  LoginActivate:
    type: "object"
    properties:
      jwt:
        type: "string"
  LoginMail:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
  Participant:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      self:
        type: "boolean"
  Settings:
    type: "object"
    properties:
      startDateEvent:
        type: "string"
        format: "date"
      maxAge:
        type: "number"
      minAge:
        type: "number"
      guardianAge:
        type: "number"
      tshirtDate:
        type: "string"
        format: "date"
      enviroment:
        type: "string"
  Tshirt:
    type: "array"
    items:
      properties:
        id:
          type: "string"
        name:
          type: "string"
  Address:
    type: "object"
    required:
      - "postalcode"
    properties:
      street:
        type: "string"
      house_number:
        type: "string"
      municipality_name:
        type: "string"
      box_number:
        type: "string"
      postalcode:
        type: "string"
        maxLength: 4
  Question:
    type: "array"
    items:
      properties:
        id:
          type: "number"
        name:
          type: "string"
        description:
          type: "string"
        positive:
          type: "string"
        negative:
          type: "string"
  Approval:
    type: "array"
    items:
      properties:
        id:
          type: "number"
        name:
          type: "string"
        description:
          type: "string"
  Attachment:
    type: "object"
    properties:
      name:
        type: "string"
      confirmed:
        type: "boolean"
      type:
        type: "string"
        enum:
          - "link"
          - "movie"
